#! /bin/bash

# Copyright (c) 2011 Spike Grobstein <spikegrobstein@mac.com>
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

print_usage () {
  echo "USAGE:"
  echo "    $0 <ip_address> <cidr>"
  echo ""
  echo "    ip_address - the address in question (eg: 10.139.138.155)"
  echo "    cidr       - the subnet in question (eg: 10.139.138.0/24)"
  echo ""
}


# will exit program with a bad status if ipcalc is not installed
sanity_check () {
  IPCALC=`which ipcalc`
  
  if [[ -z "$IPCALC" ]]; then
    echo "ipcalc is not found in your path. ack!" >&2
    exit 1
  fi
}

ip_to_int () 
{ 
  local IP=$1
  local IPNUM=0
   
  for (( i=0 ; i<4 ; ++i )); do 
    ((IPNUM+=${IP%%.*}*$((256**$((3-${i})))))) 
    IP=${IP#*.} 
  done
   
  echo $IPNUM 
}

int_to_ip () 
{ 
  echo -n $(($(($(($((${1}/256))/256))/256))%256)). 
  echo -n $(($(($((${1}/256))/256))%256)). 
  echo -n $(($((${1}/256))%256)). 
  echo $((${1}%256)) 
}

# return the start address of a subnet
subnet_start_address () {
  echo `ipcalc --nobinary --nocolor $* | grep "HostMin" | awk -F ":" '{ print $2 }'`
}

# return the end address of a subnet
subnet_end_address() {
  echo `ipcalc --nobinary --nocolor $* | grep "HostMax" | awk -F ":" '{ print $2 }'`
}

# return the number of addresses in the block
subnet_host_count () {
  echo `ipcalc --nobinary --nocolor $* | grep "Hosts/Net" | awk -F ":" '{ print $2 }' | awk -F ' ' '{ print $1 }'`
}

# do sanity check.
sanity_check
 
if [[ $# != 2 ]]; then
  print_usage
  exit 0
fi

ADDRESS=$1
SUBNET=$2

ADDRESS_INT=`ip_to_int $ADDRESS`

START=`subnet_start_address $SUBNET`
END=`subnet_end_address $SUBNET`

START=`ip_to_int $START`
END=`ip_to_int $END`

if [[ $ADDRESS_INT > $START && $ADDRESS_INT < $END ]]; then
  echo "$ADDRESS is inside $SUBNET"
  exit 0
else
  echo "$ADDRESS is NOT inside $SUBNET"
  exit 1
fi


